/**
 * GitLab API
 * An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](openapi_interactive.md). 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package examples.gitlab.api

import examples.gitlab.model.AccessTokenList
import examples.gitlab.model.AccessTokenList1
import java.time.LocalDate
import examples.gitlab.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object AccessTokensApi {

def apply(baseUrl: String = "http://localhost/api") = new AccessTokensApi(baseUrl)
}

class AccessTokensApi(baseUrl: String) {

  /**
   * Revokes an access token
   * 
   * Expected answers:
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   *   code 204 :  (No content if successfully revoked)
   * 
   * Available security schemes:
   *   ApiKeyAuth (apiKey)
   * 
   * @param id The ID or URL-encoded path of the project
   * @param tokenId The ID of the project access token
   */
  def accessTokensDelete(apiKey: String, id: Int, tokenId: Int
): Request[Either[ResponseException[String, Exception], Unit], Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/v4/projects/${id}/access_tokens/${tokenId}")
      .contentType("application/json")
      .header("Private-Token", apiKey)
.response(asJson[Unit])

  /**
   * Lists access tokens for a project
   * 
   * Expected answers:
   *   code 404 :  (Not Found)
   *   code 401 :  (Unauthorized operation)
   *   code 200 : AccessTokenList (Successful operation)
   * 
   * Available security schemes:
   *   ApiKeyAuth (apiKey)
   * 
   * @param id The ID or URL-encoded path of the project
   */
  def accessTokensGet(apiKey: String, id: Int
): Request[Either[ResponseException[String, Exception], AccessTokenList], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/v4/projects/${id}/access_tokens")
      .contentType("application/json")
      .header("Private-Token", apiKey)
.response(asJson[AccessTokenList])

  /**
   * Creates an access token for a project
   * 
   * Expected answers:
   *   code 404 :  (Not Found)
   *   code 401 :  (Unauthorized operation)
   *   code 200 : AccessTokenList1 (Successful operation)
   * 
   * Available security schemes:
   *   ApiKeyAuth (apiKey)
   * 
   * @param id The ID or URL-encoded path of the project
   * @param name The name of the project access token
   * @param scopes Defines read and write permissions for the token
   * @param expiresAt Date when the token expires. Time of day is Midnight UTC of that date.
   */
  def accessTokensPost(apiKey: String, id: Int, name: String, scopes: Seq[String], expiresAt: Option[LocalDate] = None
): Request[Either[ResponseException[String, Exception], AccessTokenList1], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/v4/projects/${id}/access_tokens?name=${ name }&scopes=${ scopes }&expires_at=${ expiresAt }")
      .contentType("application/json")
      .header("Private-Token", apiKey)
.response(asJson[AccessTokenList1])

}
