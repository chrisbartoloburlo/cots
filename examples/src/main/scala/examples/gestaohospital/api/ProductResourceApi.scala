/**
 * Sistema de Gestão Hospital API
 * Documentação da API de acesso aos endpoints da GestaoHospitalAPI - Aceleradev Brasil  Jornada de desafios da Aceleradev Brasil - CodeNation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package examples.gestaohospital.api

import examples.gestaohospital.model.ProductDTO
import examples.gestaohospital.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object ProductResourceApi {

def apply(baseUrl: String = "http://localhost:8080") = new ProductResourceApi(baseUrl)
}

class ProductResourceApi(baseUrl: String) {

  /**
   * Expected answers:
   *   code 200 : String (OK)
   *   code 401 :  (Unauthorized)
   *   code 204 :  (No Content)
   *   code 403 :  (Forbidden)
   * 
   * @param hospitalId hospital_id
   * @param produtoId produto_id
   */
  def deleteUsingDELETE(hospitalId: String, produtoId: String
): Request[Either[ResponseException[String, Exception], String], Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/v1/hospitais/${hospitalId}/estoque/${produtoId}")
      .contentType("application/json")
      .response(asJson[String])

  /**
   * Expected answers:
   *   code 200 : Seq[ProductDTO] (OK)
   *   code 401 :  (Unauthorized)
   *   code 403 :  (Forbidden)
   *   code 404 :  (Not Found)
   * 
   * @param hospitalId hospital_id
   */
  def findAllProductByUsingGET(hospitalId: String
): Request[Either[ResponseException[String, Exception], Seq[ProductDTO]], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/v1/hospitais/${hospitalId}/estoque")
      .contentType("application/json")
      .response(asJson[Seq[ProductDTO]])

  /**
   * Expected answers:
   *   code 200 : ProductDTO (OK)
   *   code 401 :  (Unauthorized)
   *   code 403 :  (Forbidden)
   *   code 404 :  (Not Found)
   * 
   * @param hospitalId hospital_id
   * @param produtoId produto_id
   */
  def findProductByUsingGET(hospitalId: String, produtoId: String
): Request[Either[ResponseException[String, Exception], ProductDTO], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/v1/hospitais/${hospitalId}/estoque/${produtoId}")
      .contentType("application/json")
      .response(asJson[ProductDTO])

  /**
   * Expected answers:
   *   code 200 : ProductDTO (OK)
   *   code 201 :  (Created)
   *   code 401 :  (Unauthorized)
   *   code 403 :  (Forbidden)
   *   code 404 :  (Not Found)
   * 
   * @param hospitalId hospital_id
   * @param productDTO productDTO
   */
  def insertUsingPOST1(hospitalId: String, productDTO: ProductDTO
): Request[Either[ResponseException[String, Exception], ProductDTO], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/v1/hospitais/${hospitalId}/estoque")
      .contentType("application/json")
      .body(productDTO)
      .response(asJson[ProductDTO])

  /**
   * Expected answers:
   *   code 200 : ProductDTO (OK)
   *   code 201 :  (Created)
   *   code 401 :  (Unauthorized)
   *   code 403 :  (Forbidden)
   *   code 404 :  (Not Found)
   * 
   * @param hospitalId hospital_id
   * @param produtoId produto_id
   * @param productDTO productDTO
   */
  def updateUsingPUT1(hospitalId: String, produtoId: String, productDTO: ProductDTO
): Request[Either[ResponseException[String, Exception], ProductDTO], Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/v1/hospitais/${hospitalId}/estoque/${produtoId}")
      .contentType("application/json")
      .body(productDTO)
      .response(asJson[ProductDTO])

}
