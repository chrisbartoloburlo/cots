/**
 * Sistema de Gestão Hospital API
 * Documentação da API de acesso aos endpoints da GestaoHospitalAPI - Aceleradev Brasil  Jornada de desafios da Aceleradev Brasil - CodeNation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package examples.gestaohospital.api

import examples.gestaohospital.model.Patient
import examples.gestaohospital.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object PatientResourceApi {

def apply(baseUrl: String = "http://localhost:8080") = new PatientResourceApi(baseUrl)
}

class PatientResourceApi(baseUrl: String) {

  /**
   * Expected answers:
   *   code 200 : Patient (OK)
   *   code 201 :  (Created)
   *   code 401 :  (Unauthorized)
   *   code 403 :  (Forbidden)
   *   code 404 :  (Not Found)
   * 
   * @param hospitalId hospital_id
   * @param patient patient
   */
  def checkinPacientUsingPOST(hospitalId: String, patient: Patient
): Request[Either[ResponseException[String, Exception], Patient], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/v1/hospitais/${hospitalId}/pacientes/checkin")
      .contentType("application/json")
      .body(patient)
      .response(asJson[Patient])

  /**
   * Expected answers:
   *   code 200 : Patient (OK)
   *   code 201 :  (Created)
   *   code 401 :  (Unauthorized)
   *   code 403 :  (Forbidden)
   *   code 404 :  (Not Found)
   * 
   * @param hospitalId hospital_id
   * @param idPatient idPatient
   */
  def checkoutPacientUsingPOST(hospitalId: String, idPatient: String
): Request[Either[ResponseException[String, Exception], Patient], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/v1/hospitais/${hospitalId}/pacientes/checkout")
      .contentType("application/json")
      .body(idPatient)
      .response(asJson[Patient])

  /**
   * Expected answers:
   *   code 200 : Patient (OK)
   *   code 401 :  (Unauthorized)
   *   code 403 :  (Forbidden)
   *   code 404 :  (Not Found)
   * 
   * @param hospitalId hospital_id
   * @param patientId patientId
   */
  def findPatientByIdUsingGET(hospitalId: String, patientId: String
): Request[Either[ResponseException[String, Exception], Patient], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/v1/hospitais/${hospitalId}/pacientes/${patientId}")
      .contentType("application/json")
      .response(asJson[Patient])

  /**
   * Expected answers:
   *   code 200 : Seq[Patient] (OK)
   *   code 401 :  (Unauthorized)
   *   code 403 :  (Forbidden)
   *   code 404 :  (Not Found)
   * 
   * @param hospitalId hospital_id
   */
  def findPatientsUsingGET(hospitalId: String
): Request[Either[ResponseException[String, Exception], Seq[Patient]], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/v1/hospitais/${hospitalId}/pacientes")
      .contentType("application/json")
      .response(asJson[Seq[Patient]])

  /**
   * Expected answers:
   *   code 200 : Patient (OK)
   *   code 201 :  (Created)
   *   code 401 :  (Unauthorized)
   *   code 403 :  (Forbidden)
   *   code 404 :  (Not Found)
   * 
   * @param hospitalId hospital_id
   * @param patientId patientId
   * @param patient patient
   */
  def updatePatientUsingPUT(hospitalId: String, patientId: String, patient: Patient
): Request[Either[ResponseException[String, Exception], Patient], Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/v1/hospitais/${hospitalId}/pacientes/${patientId}")
      .contentType("application/json")
      .body(patient)
      .response(asJson[Patient])

}
