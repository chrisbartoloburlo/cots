/**
 * Common CRUD API
 *     A complete user registry, with access permissions,     JWT token, integration and unit tests, using     the RESTful API pattern. 
 *
 * The version of the OpenAPI document: v4.0.1
 * Contact: throyer.dev@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package examples.usersregistry.api

import examples.usersregistry.model.ApiError
import examples.usersregistry.model.CreateUserProps
import examples.usersregistry.model.PageUser
import examples.usersregistry.model.UpdateUserProps
import examples.usersregistry.model.User
import examples.usersregistry.model.ValidationError
import examples.usersregistry.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object UsersApi {

def apply(baseUrl: String = "http://localhost:8080") = new UsersApi(baseUrl)
}

class UsersApi(baseUrl: String) {

  /**
   * Expected answers:
   *   code 400 : Seq[ValidationError] (Bad Request)
   *   code 401 : ApiError (Unauthorized)
   *   code 204 :  (No Content)
   * 
   * Available security schemes:
   *   token (http)
   * 
   * @param id 
   */
  def destroy(bearerToken: String, id: Long
): Request[Either[ResponseException[String, Exception], Unit], Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/users/${id}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[Unit])

  /**
   * Expected answers:
   *   code 400 : Seq[ValidationError] (Bad Request)
   *   code 401 : ApiError (Unauthorized)
   *   code 200 : PageUser (OK)
   * 
   * Available security schemes:
   *   token (http)
   * 
   * @param page 
   * @param size 
   */
  def index(bearerToken: String, page: Option[Int] = None, size: Option[Int] = None
): Request[Either[ResponseException[String, Exception], PageUser], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/users?page=${ page.getOrElse(None) }&size=${ size.getOrElse(None) }")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[PageUser])

  /**
   * Returns the new user
   * 
   * Expected answers:
   *   code 400 : Seq[ValidationError] (Bad Request)
   *   code 401 : ApiError (Unauthorized)
   *   code 201 : User (Created)
   * 
   * @param createUserProps 
   */
  def save(createUserProps: CreateUserProps
): Request[Either[ResponseException[String, Exception], User], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/users")
      .contentType("application/json")
      .body(createUserProps)
      .response(asJson[User])

  /**
   * Expected answers:
   *   code 400 : Seq[ValidationError] (Bad Request)
   *   code 401 : ApiError (Unauthorized)
   *   code 200 : User (OK)
   * 
   * Available security schemes:
   *   token (http)
   * 
   * @param id 
   */
  def show(bearerToken: String, id: Long
): Request[Either[ResponseException[String, Exception], User], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/users/${id}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[User])

  /**
   * Expected answers:
   *   code 400 : Seq[ValidationError] (Bad Request)
   *   code 401 : ApiError (Unauthorized)
   *   code 200 : User (OK)
   * 
   * Available security schemes:
   *   token (http)
   * 
   * @param id 
   * @param updateUserProps 
   */
  def update(bearerToken: String, id: Long, updateUserProps: UpdateUserProps
): Request[Either[ResponseException[String, Exception], User], Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/users/${id}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(updateUserProps)
      .response(asJson[User])

}
