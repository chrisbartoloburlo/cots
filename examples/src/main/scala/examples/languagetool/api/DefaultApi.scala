/**
 * LanguageTool API
 * Check texts for style and grammar issues with <a href='https://languagetool.org'>LanguageTool</a>. Please consider the following default limitations:<ul><li>your daily request limit depending on <a href='https://languagetool.org/editor/settings/api'>your plan</a> <li>maximum number of requests per minute: 20 (free) / 80 (Premium) <li>maximum number of characters per minute: 75,000 (free) / 300,000 (Premium) <li>maximum number of characters per request: 20,000 (free) / 60,000 (Premium) <li>for the free version, also consider the <a href='https://dev.languagetool.org/public-http-api'>limitations documented here</a> <li><b>Note:</b> any parameters or outputs not part of this documentation are internal and must not be relied on</ul> Need more generous limits? Just <a href='https://languagetool.org/proofreading-api'>contact us</a>.
 *
 * The version of the OpenAPI document: 1.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package examples.languagetool.api

import examples.languagetool.model.AddWordsResponse
import examples.languagetool.model.CheckResponse
import examples.languagetool.model.DeleteWordsResponse
import examples.languagetool.model.GetWordsResponse
import examples.languagetool.model.LanguagesGet200ResponseInner
import examples.languagetool.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object DefaultApi {

def apply(baseUrl: String = "http://localhost:8081/v2") = new DefaultApi(baseUrl)
}

class DefaultApi(baseUrl: String) {

  /**
   * The main feature - check a text with LanguageTool for possible style and grammar issues.
   * 
   * Expected answers:
   *   code 200 : CheckResponse (the result of checking the text)
   * 
   * @param language A language code like `en-US`, `de-DE`, `fr`, or `auto` to guess the language automatically (see `preferredVariants` below). For languages with variants (English, German, Portuguese) spell checking will only be activated when you specify the variant, e.g. `en-GB` instead of just `en`.
   * @param text The text to be checked. This or 'data' is required.
   * @param data The text to be checked, given as a JSON document that specifies what's text and what's markup. This or 'text' is required. Markup will be ignored when looking for errors. Example text: <pre>A &lt;b>test&lt;/b></pre>JSON for the example text: <pre>{\"annotation\":[  {\"text\": \"A \"},  {\"markup\": \"&lt;b>\"},  {\"text\": \"test\"},  {\"markup\": \"&lt;/b>\"} ]}</pre> <p>If you have markup that should be interpreted as whitespace, like <tt>&lt;p&gt;</tt> in HTML, you can have it interpreted like this: <pre>{\"markup\": \"&lt;p&gt;\", \"interpretAs\": \"\\n\\n\"}</pre><p>The 'data' feature is not limited to HTML or XML, it can be used for any kind of markup. Entities will need to be expanded in this input.
   * @param username Set to get Premium API access: Your username/email as used to log in at languagetool.org.
   * @param apiKey Set to get Premium API access: <a target='_blank' href='https://languagetool.org/editor/settings/api'>your API key</a>
   * @param dicts Comma-separated list of dictionaries to include words from; uses special default dictionary if this is unset
   * @param motherTongue A language code of the user's native language, enabling false friends checks for some language pairs.
   * @param preferredVariants Comma-separated list of preferred language variants. The language detector used with `language=auto` can detect e.g. English, but it cannot decide whether British English or American English is used. Thus this parameter can be used to specify the preferred variants like `en-GB` and `de-AT`. Only available with `language=auto`. You should set variants for at least German and English, as otherwise the spell checking will not work for those, as no spelling dictionary can be selected for just `en` or `de`.
   * @param enabledRules IDs of rules to be enabled, comma-separated
   * @param disabledRules IDs of rules to be disabled, comma-separated
   * @param enabledCategories IDs of categories to be enabled, comma-separated
   * @param disabledCategories IDs of categories to be disabled, comma-separated
   * @param enabledOnly If true, only the rules and categories whose IDs are specified with `enabledRules` or `enabledCategories` are enabled.
   * @param level If set to `picky`, additional rules will be activated, i.e. rules that you might only find useful when checking formal text.
   */
  def checkPost(language: String, text: Option[String] = None, data: Option[String] = None, username: Option[String] = None, apiKey: Option[String] = None, dicts: Option[String] = None, motherTongue: Option[String] = None, preferredVariants: Option[String] = None, enabledRules: Option[String] = None, disabledRules: Option[String] = None, enabledCategories: Option[String] = None, disabledCategories: Option[String] = None, enabledOnly: Option[Boolean] = None, level: Option[String] = None
): Request[Either[ResponseException[String, Exception], CheckResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/check?text=${ text.getOrElse(None) }&data=${ data.getOrElse(None) }&language=${ language }&username=${ username.getOrElse(None) }&apiKey=${ apiKey.getOrElse(None) }&dicts=${ dicts.getOrElse(None) }&motherTongue=${ motherTongue.getOrElse(None) }&preferredVariants=${ preferredVariants.getOrElse(None) }&enabledRules=${ enabledRules.getOrElse(None) }&disabledRules=${ disabledRules.getOrElse(None) }&enabledCategories=${ enabledCategories.getOrElse(None) }&disabledCategories=${ disabledCategories.getOrElse(None) }&enabledOnly=${ enabledOnly.getOrElse(None) }&level=${ level.getOrElse(None) }")
      .contentType("application/json")
      .response(asJson[CheckResponse])

  /**
   * Expected answers:
   *   code 200 : Seq[LanguagesGet200ResponseInner] (An array of language objects.)
   */
  def languagesGet(
): Request[Either[ResponseException[String, Exception], Seq[LanguagesGet200ResponseInner]], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/languages")
      .contentType("application/json")
      .response(asJson[Seq[LanguagesGet200ResponseInner]])

  /**
   * Add a word to one of the user's personal dictionaries. Please note that this feature is considered to be used for personal dictionaries which must not contain more than 500 words. If this is an issue for you, please contact us.
   * 
   * Expected answers:
   *   code 200 : AddWordsResponse (the result of adding the word)
   * 
   * @param word The word to be added. Must not be a phrase, i.e. cannot contain white space. The word is added to a global dictionary that applies to all languages.
   * @param username Your username as used to log in at languagetool.org.
   * @param apiKey <a target='_blank' href='https://languagetool.org/editor/settings/api'>Your API key</a>
   * @param dict Name of the dictionary to add the word to; non-existent dictionaries are created after calling this; if unset, adds to special default dictionary
   */
  def wordsAddPost(word: String, username: String, apiKey: String, dict: Option[String] = None
): Request[Either[ResponseException[String, Exception], AddWordsResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/words/add?word=${ word }&username=${ username }&apiKey=${ apiKey }&dict=${ dict.getOrElse(None) }")
      .contentType("application/json")
      .response(asJson[AddWordsResponse])

  /**
   * Remove a word from one of the user's personal dictionaries.
   * 
   * Expected answers:
   *   code 200 : DeleteWordsResponse (the result of removing the word)
   * 
   * @param word The word to be removed.
   * @param username Your username as used to log in at languagetool.org.
   * @param apiKey <a target='_blank' href='https://languagetool.org/editor/settings/api'>Your API key</a>
   * @param dict Name of the dictionary to remove the word from; if the dictionary is empty upon calling this, it is deleted; if unset, removes from special default dictionary
   */
  def wordsDeletePost(word: String, username: String, apiKey: String, dict: Option[String] = None
): Request[Either[ResponseException[String, Exception], DeleteWordsResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/words/delete?word=${ word }&username=${ username }&apiKey=${ apiKey }&dict=${ dict.getOrElse(None) }")
      .contentType("application/json")
      .response(asJson[DeleteWordsResponse])

  /**
   * List words in the user's personal dictionaries.
   * 
   * Expected answers:
   *   code 200 : GetWordsResponse (the user's words from the given user dictionaries)
   * 
   * @param username Your username as used to log in at languagetool.org.
   * @param apiKey <a target='_blank' href='https://languagetool.org/editor/settings/api'>Your API key</a>
   * @param offset Offset of where to start in the list of words. Defaults to 0.
   * @param limit Maximum number of words to return. Defaults to 10.
   * @param dicts Comma-separated list of dictionaries to include words from; uses special default dictionary if this is unset
   */
  def wordsGet(username: String, apiKey: String, offset: Option[Int] = None, limit: Option[Int] = None, dicts: Option[String] = None
): Request[Either[ResponseException[String, Exception], GetWordsResponse], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/words?offset=${ offset.getOrElse(None) }&limit=${ limit.getOrElse(None) }&username=${ username }&apiKey=${ apiKey }&dicts=${ dicts.getOrElse(None) }")
      .contentType("application/json")
      .response(asJson[GetWordsResponse])

}
