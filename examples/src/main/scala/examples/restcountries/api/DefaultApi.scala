/**
 * REST countries API
 * REST countries API
 *
 * The version of the OpenAPI document: v2.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package examples.restcountries.api

import examples.restcountries.model.CountryV1
import examples.restcountries.model.CountryV2
import examples.restcountries.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object DefaultApi {

def apply(baseUrl: String = "http://localhost:8080/rest") = new DefaultApi(baseUrl)
}

class DefaultApi(baseUrl: String) {

  /**
   * Expected answers:
   *   code 200 : Seq[CountryV1] (Successful response)
   */
  def v1All(
): Request[Either[ResponseException[String, Exception], Seq[CountryV1]], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/v1/all")
      .contentType("application/json")
      .response(asJson[Seq[CountryV1]])

  /**
   * Expected answers:
   *   code 200 :  (Successful response)
   *   code 0 :  (Other responses)
   * 
   * @param alphacode 
   */
  def v1Alphacode(alphacode: String
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/v1/alpha/${alphacode}")
      .contentType("application/json")
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 200 :  (Successful response)
   *   code 0 :  (Other responses)
   * 
   * @param codes 
   */
  def v1Alphacodes(codes: String
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/v1/alpha?codes=${ codes }")
      .contentType("application/json")
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 200 :  (Successful response)
   *   code 0 :  (Other responses)
   * 
   * @param callingcode 
   */
  def v1Callingcode(callingcode: String
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/v1/callingcode/${callingcode}")
      .contentType("application/json")
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 200 :  (Successful response)
   *   code 0 :  (Other responses)
   * 
   * @param capital 
   */
  def v1Capital(capital: String
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/v1/capital/${capital}")
      .contentType("application/json")
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 200 :  (Successful response)
   *   code 0 :  (Other responses)
   * 
   * @param currency 
   */
  def v1Currency(currency: String
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/v1/currency/${currency}")
      .contentType("application/json")
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 200 :  (Successful response)
   *   code 0 :  (Other responses)
   * 
   * @param lang 
   */
  def v1Lang(lang: String
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/v1/lang/${lang}")
      .contentType("application/json")
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 200 :  (Successful response)
   *   code 0 :  (Other responses)
   * 
   * @param name 
   * @param fullText 
   */
  def v1Name(name: String, fullText: Option[Boolean] = None
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/v1/name/${name}?fullText=${ fullText.getOrElse(None) }")
      .contentType("application/json")
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 200 :  (Successful response)
   *   code 0 :  (Other responses)
   * 
   * @param region 
   */
  def v1Region(region: String
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/v1/region/${region}")
      .contentType("application/json")
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 200 :  (Successful response)
   *   code 0 :  (Other responses)
   * 
   * @param subregion 
   */
  def v1Subregion(subregion: String
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/v1/subregion/${subregion}")
      .contentType("application/json")
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 200 : Seq[CountryV2] (Successful response)
   * 
   * @param fields 
   */
  def v2All(fields: Option[String] = None
): Request[Either[ResponseException[String, Exception], Seq[CountryV2]], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/v2/all?fields=${ fields.getOrElse(None) }")
      .contentType("application/json")
      .response(asJson[Seq[CountryV2]])

  /**
   * Expected answers:
   *   code 200 :  (Successful response)
   *   code 0 :  (Other responses)
   * 
   * @param alphacode 
   * @param fields 
   */
  def v2Alphacode(alphacode: String, fields: Option[String] = None
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/v2/alpha/${alphacode}?fields=${ fields.getOrElse(None) }")
      .contentType("application/json")
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 200 :  (Successful response)
   *   code 0 :  (Other responses)
   * 
   * @param codes 
   * @param fields 
   */
  def v2Alphacodes(codes: String, fields: Option[String] = None
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/v2/alpha?fields=${ fields.getOrElse(None) }&codes=${ codes }")
      .contentType("application/json")
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 200 :  (Successful response)
   *   code 0 :  (Other responses)
   * 
   * @param callingcode 
   * @param fields 
   */
  def v2Callingcode(callingcode: String, fields: Option[String] = None
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/v2/callingcode/${callingcode}?fields=${ fields.getOrElse(None) }")
      .contentType("application/json")
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 200 :  (Successful response)
   *   code 0 :  (Other responses)
   * 
   * @param capital 
   * @param fields 
   */
  def v2Capital(capital: String, fields: Option[String] = None
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/v2/capital/${capital}?fields=${ fields.getOrElse(None) }")
      .contentType("application/json")
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 200 :  (Successful response)
   *   code 0 :  (Other responses)
   * 
   * @param currency 
   * @param fields 
   */
  def v2Currency(currency: String, fields: Option[String] = None
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/v2/currency/${currency}?fields=${ fields.getOrElse(None) }")
      .contentType("application/json")
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 200 :  (Successful response)
   *   code 0 :  (Other responses)
   * 
   * @param demonym 
   * @param fields 
   */
  def v2Demonym(demonym: String, fields: Option[String] = None
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/v2/demonym/${demonym}?fields=${ fields.getOrElse(None) }")
      .contentType("application/json")
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 200 :  (Successful response)
   *   code 0 :  (Other responses)
   * 
   * @param lang 
   * @param fields 
   */
  def v2Lang(lang: String, fields: Option[String] = None
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/v2/lang/${lang}?fields=${ fields.getOrElse(None) }")
      .contentType("application/json")
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 200 :  (Successful response)
   *   code 0 :  (Other responses)
   * 
   * @param name 
   * @param fields 
   * @param fullText 
   */
  def v2Name(name: String, fields: Option[String] = None, fullText: Option[Boolean] = None
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/v2/name/${name}?fields=${ fields.getOrElse(None) }&fullText=${ fullText.getOrElse(None) }")
      .contentType("application/json")
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 200 :  (Successful response)
   *   code 0 :  (Other responses)
   * 
   * @param region 
   * @param fields 
   */
  def v2Region(region: String, fields: Option[String] = None
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/v2/region/${region}?fields=${ fields.getOrElse(None) }")
      .contentType("application/json")
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 200 :  (Successful response)
   *   code 0 :  (Other responses)
   * 
   * @param regionalbloc 
   * @param fields 
   */
  def v2Regionalbloc(regionalbloc: String, fields: Option[String] = None
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/v2/regionalbloc/${regionalbloc}?fields=${ fields.getOrElse(None) }")
      .contentType("application/json")
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 200 :  (Successful response)
   *   code 0 :  (Other responses)
   * 
   * @param subregion 
   * @param fields 
   */
  def v2Subregion(subregion: String, fields: Option[String] = None
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/v2/subregion/${subregion}?fields=${ fields.getOrElse(None) }")
      .contentType("application/json")
      .response(asEither(asString, ignore))

}
